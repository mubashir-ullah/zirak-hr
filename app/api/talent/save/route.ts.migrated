import { NextResponse } from 'next/server';
import supabase from '@/lib/supabase';

export async function POST(request: Request) {
  try {
    const body = await request.json();
    
    const { candidateId, userId } = body;
    
    if (!candidateId || !userId) {
      return NextResponse.json(
        { error: 'Candidate ID and User ID are required' },
        { status: 400 }
      );
    }
    
    // Check if the candidate exists
    const { data: candidate, error: candidateError } = await supabase
      .from('candidates')
      .select('*')
      .eq('id', candidateId)
      .single();
    
    if (candidateError || !candidate) {
      return NextResponse.json(
        { error: 'Candidate not found' },
        { status: 404 }
      );
    }
    
    // Check if the candidate is already saved
    const { data: existingSave, error: saveCheckError } = await supabase
      .from('saved_candidates')
      .select('*')
      .eq('candidate_id', candidateId)
      .eq('user_id', userId)
      .single();
    
    if (saveCheckError && saveCheckError.code !== 'PGRST116') {
      // PGRST116 is the error code for "no rows returned" which is expected if not saved
      throw saveCheckError;
    }
    
    if (existingSave) {
      return NextResponse.json(
        { message: 'Candidate already saved', alreadySaved: true },
        { status: 200 }
      );
    }
    
    // Save the candidate
    const { error: saveError } = await supabase
      .from('saved_candidates')
      .insert({
        candidate_id: candidateId,
        user_id: userId,
        saved_at: new Date().toISOString()
      });
    
    if (saveError) {
      throw saveError;
    }
    
    return NextResponse.json({
      success: true,
      message: 'Candidate saved successfully'
    });
    
  } catch (error) {
    console.error('Error saving candidate:', error);
    return NextResponse.json(
      { error: 'Failed to save candidate' },
      { status: 500 }
    );
  }
}
